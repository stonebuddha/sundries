export TERMINFO="/usr/share/terminfo/"
export TERM="xterm-256color"

# base16-shell
BASE16_SHELL="$HOME/.config/base16-shell/"
[ -n "$PS1" ] && [ -z "$TERM_PROGRAM" ] && \
	[ -s "$BASE16_SHELL/profile_helper.sh" ] && \
	eval "$("$BASE16_SHELL/profile_helper.sh")"

# antigen using oh-my-zsh
ANTIGEN="$HOME/.config/antigen.zsh"
source "$ANTIGEN"
antigen use oh-my-zsh

# version control
antigen bundle git
antigen bundle gitignore

# macOS
antigen bundle macos
antigen bundle brew

# misc
antigen bundle colorize				# cat with highlight
antigen bundle rupa/z z.sh		# autojump

# completion
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-completions

# shell highlight
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[default]=none
ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=009
ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=009,standout
ZSH_HIGHLIGHT_STYLES[alias]=fg=cyan,bold
ZSH_HIGHLIGHT_STYLES[builtin]=fg=cyan,bold
ZSH_HIGHLIGHT_STYLES[function]=fg=cyan,bold
ZSH_HIGHLIGHT_STYLES[command]=fg=white,bold
ZSH_HIGHLIGHT_STYLES[precommand]=fg=white,underline
ZSH_HIGHLIGHT_STYLES[commandseparator]=none
ZSH_HIGHLIGHT_STYLES[hashed-command]=fg=009
ZSH_HIGHLIGHT_STYLES[path]=fg=214,underline
ZSH_HIGHLIGHT_STYLES[globbing]=fg=magenta
ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=white,underline
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=none
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=none
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=magenta
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=magenta
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=009
ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=009
ZSH_HIGHLIGHT_STYLES[assign]=none
antigen bundle zsh-users/zsh-syntax-highlighting

antigen apply

# fish-style prompt
function _fish_collapsed_pwd() {
	local pwd="$1"
	local home="$HOME"
	local size=${#home}
	[[ $# == 0 ]] && pwd="$PWD"
	[[ -z "$pwd" ]] && return
	if [[ "$pwd" == "/" ]]; then
		echo "/"
		return
	elif [[ "$pwd" == "$home" ]]; then
		echo "~"
		return
	fi
	[[ "$pwd" == "$home/"* ]] && pwd="~${pwd:$size}"
	local elements=("${(s:/:)pwd}")
	local length=${#elements}
	for i in {1..$((length-1))}; do
		local elem=${elements[$i]}
		if [[ ${#elem} > 1 ]]; then
			elements[$i]=${elem[1]}
		fi
	done
	local IFS="/"
	echo "${elements[*]}"
}

ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg[green]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY=" %{$fg[red]%}✗%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_CLEAN=" %{$fg[green]%}✔%{$reset_color%}"

function _user_host() {
	if [[ -n $SSH_CONNECTION ]]; then
		echo "%n@%m "
	elif [[ $LOGNAME != $USER ]]; then
		echo "%n "
	fi
}

export PROMPT='%F{15}$(_user_host)%f%F{2}$(_fish_collapsed_pwd)%f%F{red}%(?.. [%?])%f> '
export RPROMPT='$(git_prompt_info)'

# settings
unsetopt correct_all
setopt BANG_HIST									# Treat the '!' character specially during expansion.
setopt INC_APPEND_HISTORY					# Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY							# Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST			# Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS						# Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS				# Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS					# Do not display a line previously found.
setopt HIST_IGNORE_SPACE					# Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS					# Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS					# Remove superfluous blanks before recording entry.
setopt HIST_VERIFY								# Don't execute immediately upon history expansion.

# opam
[[ ! -r $HOME/.opam/opam-init/init.zsh ]] || source $HOME/.opam/opam-init/init.zsh  > /dev/null 2> /dev/null

# rbenv
eval "$(rbenv init -)"

# ruby
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"

# openssl
export OPENSSL_ROOT_DIR=$(brew --prefix openssl)

# M2
export CPATH=/opt/homebrew/include
export LIBRARY_PATH=/opt/homebrew/lib

function activate_x86() {
	export OLDPATH=$PATH
	export PATH=/usr/local/homebrew/bin:/usr/local/homebrew/sbin:$PATH
	export CPATH=/usr/local/homebrew/include
	export LIBRARY_PATH=/usr/local/homebrew/lib
	export OLDPROMPT=$PROMPT
	export PROMPT="[x86] $PROMPT"
	alias brew='arch -x86_64 /usr/local/homebrew/bin/brew'
}

function deactivate_x86() {
	export PATH=$OLDPATH
	export OLDPATH=
	export CPATH=/opt/homebrew/include
	export LIBRARY_PATH=/opt/homebrew/lib
	export PROMPT=$OLDPROMPT
	export OLDPROMPT=
	unalias brew
}

# MoonBit
export PATH="$HOME/.moon/bin:$PATH"

# GraalVM
#export JAVA_HOME="/Library/Java/JavaVirtualMachines/graalvm-jdk-21.0.1+12.1/Contents/Home"
#export PATH="/Library/Java/JavaVirtualMachines/graalvm-jdk-21.0.1+12.1/Contents/Home/bin:$PATH"
#export JAVA_HOME="/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home"
#export PATH="/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/bin:$PATH"
export JAVA_HOME="/opt/homebrew/opt/openjdk@17"
export PATH="/opt/homebrew/opt/openjdk@17/bin:$PATH"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# MoJo
export MODULAR_HOME="$HOME/.modular"
export PATH="$(modular config mojo.path)/bin:$PATH"

# rustup
export PATH="/opt/homebrew/opt/rustup/bin:$PATH"

# LM Studio CLI (lms)
export PATH="$PATH:$HOME/.lmstudio/bin"

# The following lines have been added by Docker Desktop to enable Docker CLI completions.
fpath=($HOME/.docker/completions $fpath)
autoload -Uz compinit
compinit
# End of Docker CLI completions

# Created by `pipx` on 2025-05-21 14:16:28
export PATH="$PATH:$HOME/.local/bin"
